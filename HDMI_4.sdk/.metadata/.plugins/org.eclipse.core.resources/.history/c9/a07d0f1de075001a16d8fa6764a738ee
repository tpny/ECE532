/******************************************************************************
*
a* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <unistd.h>
#include <xil_types.h>
#include "platform.h"
#include "xil_printf.h"
#include "dynclk/dynclk.h"
#include "images/images.h"
#include "xuartlite.h"
#include "xuartlite_i.h"
#include "xil_io.h"
#include "xintc.h"
#include <math.h>

//volatile unsigned int* VTPG = XPAR_XV_TPG_0_S_AXI_CTRL_BASEADDR;
volatile unsigned int* VTC = XPAR_V_TC_0_BASEADDR;
volatile unsigned int* VDMA = XPAR_AXI_VDMA_0_BASEADDR;
volatile unsigned int* Addr1 = 0x90000000;
volatile unsigned int* Addr2 = 0x92000000;
volatile unsigned int* enemy_up = 0x94000000;
volatile unsigned int* enemy_left = 0x94100000;
volatile unsigned int* enemy_right = 0x94200000;
volatile unsigned int* enemy_down = 0x94300000;
volatile unsigned int* player_up = 0x94400000;
volatile unsigned int* player_left = 0x94500000;
volatile unsigned int* player_right = 0x94600000;
volatile unsigned int* player_down = 0x94700000;
volatile unsigned int* base = 0x94800000;
volatile unsigned int* empty = 0x94900000;
volatile unsigned int* concrete = 0x94A00000;
volatile unsigned int* shell = 0x94B00000;
volatile unsigned int* DYC = XPAR_AXI_DYNCLK_0_BASEADDR;
volatile unsigned int* BT_input =  XPAR_GPIO_0_BASEADDR;
volatile unsigned int* Enemy_input =  XPAR_GPIO_1_BASEADDR;
//volatile unsigned int* TEST =  XPAR_GPIO_1_BASEADDR;
volatile unsigned int* CDMA_1 = XPAR_AXI_CDMA_1_BASEADDR;
volatile unsigned* Game = XPAR_GAMELOGIC_0_S00_AXI_BASEADDR;


XUartLite BT_UartLite;
XIntc InterruptController;     /* Instance of Interrupt Controller */
#define BT_UARTLITE__ID      	XPAR_UARTLITE_1_DEVICE_ID
#define UARTLITE_INT_IRQ_ID_1   XPAR_INTC_0_UARTLITE_1_VEC_ID
#define INTC_DEVICE_ID          XPAR_INTC_0_DEVICE_ID

#define TEST_BUFFER_SIZE        9
u8 ReceiveBuffer[TEST_BUFFER_SIZE];
static volatile int TotalReceivedCount;
void RecvHandler(void *CallBackRef, unsigned int EventData);
int SetupInterruptSystem(XUartLite *UartLitePtr);
void VTC_setup();
void dynamic_Clk_setup();
void VDMA_setup();
void BT_setup();

ClkConfig clkReg;
ClkMode clkMode;
double freq = 133;
int sample_per_clk = 1;
int tmp = 0;
int height = 1080;
int width = 1920;
int param[6];

int direction = 0;
int x,y;

unsigned var;


int main()
{
    init_platform();
    disable_caches();
    print("init_platform\n");

	VTC_setup();
	dynamic_Clk_setup();
	VDMA_setup();

	BT_setup();


	print("Writing VRAM..........");
	for(int i =0; i< 1920 * 3/4 *120; ++i)
	{
		Addr1[i] = 0x00000000;
	}
	print("Done\n");


	print("player_load_image..........");
	player_load_image(player_up, player_down, player_left, player_right);
	enemy_load_image(enemy_up, enemy_down, enemy_left, enemy_right);
	wall_load_image(shell, base, empty, concrete);
	print("Done\n");


	print("Programming game reg..........");
	var = (120 << 11) + 120;
	Game[1] = var;
	var = (360 << 11) + 360;
	Game[2] = var;
	Game[3] = (unsigned) enemy_up;
	Game[4] = (unsigned) enemy_down;
	Game[5] = (unsigned) enemy_left;
	Game[6] = (unsigned) enemy_right;
	Game[7] = (unsigned) player_up;
	Game[8] = (unsigned) player_down;
	Game[9] = (unsigned) player_left;
	Game[10] = (unsigned) player_right;
	Game[11] = (unsigned) base;
	Game[12] = (unsigned) concrete;
	Game[13] = (unsigned) empty;
	Game[14] = (unsigned) shell;
	Game[0] = 0x00000002;
	Game[0] = 0x00000000;
	print("Init tanks..........");
	Game[1] = 0b00000000000011111111111111111111;
	Game[2] = 0b00000000111100000000000000111100;
	Game[3] = 0b00001111000000000000001111000000;
	Game[4] = 0b11110000000000000011110000000000;
	Game[5] = 0b00000000000000111100000000000000;
	Game[6] = 0b00000000001111000000000000001111;
	Game[7] = 0b00000011110000000000000011110000;
	Game[8] = 0b00111100000000000000111100000000;
	Game[9] = 0b11111111111111111111000000000000;
	Game[0] = 0x00000004;
	Game[0] = 0x00000000;
	print("Init map..........");

	Game[0] = 0x00000001;
	Game[0] = 0x00000000;
	print("Done\n");
	BT_input[2] = 0x00006FFF;

	//MOVE_in[0] = 0x78;
	//MOVE_in[1] = 0x78;
	//MOVE_in[2] = 0xFF;
	/*
	unsigned ret = CDMA_1[1];
	xil_printf("CDMA status 0x%x\n", ret);
	while(!(ret & 0x00000002))
	{
		ret = CDMA_1[1];
		xil_printf("CDMA status 0x%x\n", ret);
	}
	CDMA_1[6] = (unsigned) Addr_temp;
	CDMA_1[8] = (unsigned) Addr1;
	CDMA_1[10] = (unsigned)  (width * 3 * 120);
	*/

	/*
	for(int i = 0 ; i < 90 ; i++)
	{
		xil_printf("At 0xss%x : 0x%x\n", &up[i], up[i]);
	}
	*/
	/*
	x = 0;
	y = 0;
	for(int k = 0; k < 120; ++k)
	{
		while(!(CDMA_1[1] & 0x00000002)) {};
		CDMA_1[6] = (unsigned) &up[k * 1440];
		CDMA_1[8] = (unsigned) &Addr1[3 * x + 4320 * y + 1440 * k];
		CDMA_1[10] = (unsigned)  360;
	}
	*/

	print("LOOP\n");
	int x = 0, y = 0;
	while(1)
	{
		x = rand() % 5;
		y = rand() % 5;
		switch(x)
		{
			case 0:
				Enemy_input[0] = 0b10000;
				break;
			case 1:
				Enemy_input[0] = 0b01000;
				break;
			case 2:
				Enemy_input[0] = 0b00100;
				break;
			case 3:
				Enemy_input[0] = 0b00010;
				break;
			case 4:
				Enemy_input[0] = 0b00001;
				break;
		}
		Enemy_input[0] = 0;
		sleep(1);
	}
    cleanup_platform();
    return 0;
}

void RecvHandler(void *CallBackRef, unsigned int EventData)
{
	TotalReceivedCount = EventData;
	/* Received Byte*/
	unsigned char got = (u8) XUartLite_ReadReg(XPAR_AXI_UARTLITE_1_BASEADDR, XUL_RX_FIFO_OFFSET);// gotint;
	xil_printf("Char: %c\n",got);
	switch(got)
	{
	case 'w':
		BT_input[0] = 0b10000;
		BT_input[0] = 0b00000;
		printf("W\n");
		break;
	case 's':
		BT_input[0] = 0b01000;
		BT_input[0] = 0b00000;
		printf("S\n");
		break;
	case 'a':
		BT_input[0] = 0b00100;
		BT_input[0] = 0b00000;
		printf("A\n");
		break;
	case 'd':
		BT_input[0] = 0b00010;
		BT_input[0] = 0b00000;
		printf("D\n");
		break;
	case ' ':
		BT_input[0] = 0b00001;
		BT_input[0] = 0b00000;
		printf("Space\n");
		break;
	default:
		BT_input[0] = 0;
	}
	return;
}


/*
 *
void RecvHandler(void *CallBackRef, unsigned int EventData)
{
	TotalReceivedCount = EventData;
	unsigned char got = (u8) XUartLite_ReadReg(XPAR_AXI_UARTLITE_1_BASEADDR, XUL_RX_FIFO_OFFSET);// gotint;
	xil_printf("Char: %c\n",got);
	switch(got)
	{
	case 'w':
		BT_input[0] = 0b00001;
		BT_input[0] = 0b00000;
		if(y > 0)
		{
			direction = 1;
			y -= 1;
		}
		for(int k = 0; k < 120; ++k)
		{
			while(!(CDMA_1[1] & 0x00000002)) {};
			CDMA_1[6] = (unsigned) &up[k * 1440];
			CDMA_1[8] = (unsigned) &Addr1[3 * x + 4320 * y + 1440 * k];
			CDMA_1[10] = (unsigned)  360;
		}
		printf("W\n");
		break;
	case 's':
		BT_input[0] = 0b00010;
		BT_input[0] = 0b00000;
		if(y < 320)
		{
			direction = 2;
			y += 1;
		}
		for(int k = 0; k < 120; ++k)
		{
			while(!(CDMA_1[1] & 0x00000002)) {};
			CDMA_1[6] = (unsigned) &down[k * 1440];
			CDMA_1[8] = (unsigned) &Addr1[3 * x + 4320 * y + 1440 * k];
			CDMA_1[10] = (unsigned)  360;
			direction = 0;
		}
		printf("S\n");
		break;
	case 'a':
		BT_input[0] = 0b00100;
		BT_input[0] = 0b00000;
		if(x > 0)
		{
			direction = 3;
			x -= 1;
		}
		for(int k = 0; k < 120; ++k)
		{
			while(!(CDMA_1[1] & 0x00000002)) {};
			CDMA_1[6] = (unsigned) &left[k * 1440];
			CDMA_1[8] = (unsigned) &Addr1[3 * x + 4320 * y + 1440 * k];
			CDMA_1[10] = (unsigned)  360;
			direction = 0;
		}
		printf("A\n");
		break;
	case 'd':
		BT_input[0] = 0b01000;
		BT_input[0] = 0b00000;
		if(x < 450)
		{
			direction = 4;
			x += 1;
		}
		for(int k = 0; k < 120; ++k)
		{
			while(!(CDMA_1[1] & 0x00000002)) {};
			CDMA_1[6] = (unsigned) &right[k * 1440];
			CDMA_1[8] = (unsigned) &Addr1[3 * x + 4320 * y + 1440 * k];
			CDMA_1[10] = (unsigned)  360;
			direction = 0;
		}
		printf("D\n");
		break;
	case ' ':
		BT_input[0] = 0b10000;
		BT_input[0] = 0b00000;
		printf("Space\n");
		break;
	default:
		BT_input[0] = 0;
	}
	return;
}
*/
int SetupInterruptSystem(XUartLite *UartLitePtr_1)
{
	int Status;
	/*
	* Initialize the interrupt controller driver so that it is ready to
	* use.
	*/
	Status = XIntc_Initialize(&InterruptController, INTC_DEVICE_ID);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	* Connect a device driver handler that will be called when an interrupt
	* for the device occurs, the device driver handler performs the
	* specific interrupt processing for the device.
	*/
	Status = XIntc_Connect(&InterruptController, UARTLITE_INT_IRQ_ID_1,
	  (XInterruptHandler)XUartLite_InterruptHandler,
	  (void *)UartLitePtr_1);
	if (Status != XST_SUCCESS) {
	return XST_FAILURE;
	}



	/*
	* Start the interrupt controller such that interrupts are enabled for
	* all devices that cause interrupts, specific real mode so that
	* the UartLite can cause interrupts through the interrupt controller.
	*/
	Status = XIntc_Start(&InterruptController, XIN_REAL_MODE);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	* Enable the interrupt for the UartLite device.
	*/
	XIntc_Enable(&InterruptController, UARTLITE_INT_IRQ_ID_1);

	/*
	* Initialize the exception table.
	*/
	Xil_ExceptionInit();

	/*
	* Register the interrupt controller handler with the exception table.
	*/
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
	(Xil_ExceptionHandler)XIntc_InterruptHandler,
	&InterruptController);

	/*
	* Enable exceptions.
	*/
	Xil_ExceptionEnable();
	return XST_SUCCESS;
}


void VTC_setup()
{
	param[0] = 32;
	param[1] = 32*sample_per_clk;
	param[2] = 32;
	param[3] = 8;
	param[4] = 8;
	param[5] = 8;
	tmp = width/sample_per_clk;
	tmp += (height << 16);
	VTC[24] = tmp;
	tmp = width/sample_per_clk + param[0] + param[1] + param[2];
	VTC[28] = tmp;
	tmp = width/sample_per_clk + param[0];
	tmp += (width/sample_per_clk + param[0] + param[1]) << 16;
	VTC[30] = tmp;
	tmp = width/sample_per_clk; // h blank start
	tmp += (width/sample_per_clk) << 16; // h blank end
	VTC[31] = tmp;
	tmp = height + param[3] + param[4] + param[5];
	tmp += (height + param[3] + param[4] + param[5]) << 16;
	VTC[29] = tmp;
	tmp = height + param[3];
	tmp += (height + param[3] + param[4]) << 16;
	VTC[32] = tmp;
	tmp = width/sample_per_clk;
	tmp += (width/sample_per_clk) << 16;
	VTC[33] = tmp;
	VTC[0] = 0x00000002;
	VTC[0] = 0x00000001;
};

void dynamic_Clk_setup()
{
	ClkFindParams(freq, &clkMode);
	if (!ClkFindReg(&clkReg, &clkMode))
	{
		xil_printf("Error calculating CLK register values\n\r");
	}
	ClkWriteReg(&clkReg,(unsigned) DYC);
	ClkStop((unsigned) DYC);
	ClkStart((unsigned) DYC);
}

void VDMA_setup()
{
    VDMA[1] = 0x00000000;
    VDMA[0] = 0x0000008B;
    VDMA[10] = 0x00000000;
    VDMA[23] = (unsigned) Addr1;
    VDMA[24] = (unsigned) Addr2;
    VDMA[22] = (unsigned) width*3;
    VDMA[21] = (unsigned) width*3;// width
    VDMA[20] = (unsigned) height;// height
}

void BT_setup()
{
	int Status = XUartLite_Initialize(&BT_UartLite, BT_UARTLITE__ID);

		//Perform self-tests to ensure that the hardware was built correctly.

		Status = XUartLite_SelfTest(&BT_UartLite);
		if (Status != XST_SUCCESS) {
		    print("XUartLite_SelfTest failed\n");
			return XST_FAILURE;
		}

		//Connect the UartLite to the interrupt subsystem such that interrupts can
		//occur. This function is application specific.
		Status = SetupInterruptSystem(&BT_UartLite);
		if (Status != XST_SUCCESS) {
		    print("SetupInterruptSystem failed\n");
			return XST_FAILURE;
		}
		XUartLite_SetRecvHandler(&BT_UartLite, RecvHandler, &BT_UartLite);

		//Enable the interrupt of the UartLite so that interrupts will occur.
		XUartLite_EnableInterrupt(&BT_UartLite);
		int index;
		for (index = 0; index < TEST_BUFFER_SIZE; index++) {
			ReceiveBuffer[index] = 0;
		}
}
